#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;

my $opts = parse_params();
parse_vcfcheck($opts);
init_plots($opts);
plot_venn_bars($opts);
for my $id (file_ids($opts))
{
	plot_tstv_by_AF($opts,$id);
	plot_indel_distribution($opts,$id);
	plot_substitutions($opts,$id);
}
plot($opts);
create_pdf($opts);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "Usage: plot-vcfcheck [OPTIONS] file.vc\n",
        "       plot-vcfcheck -p outdir/ file.vc\n",
        "Options:\n",
        "   -k, --keep-files                    Do not remove temporary files.\n",
        "   -p, --prefix <path>                 The output files prefix, add a slash to create new directory.\n",
        "   -t, --title <string>                Use this title in plots, can be given multiple times.\n",
        "   -h, -?, --help                      This help message.\n",
        "\n";
}


sub parse_params
{
    $0 =~ s{^.+/}{};
    my $opts = 
	{ 
		args   => join(' ',$0,@ARGV), 
		img_width  => 11/2.54,
		img_height => 10/2.54,
	};
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-k' || $arg eq '--keep-files' ) { $$opts{keep_files}=1; next; }
        if ( $arg eq '-t' || $arg eq '--titles' ) { push @{$$opts{titles}},shift(@ARGV); next; }
        if ( $arg eq '-p' || $arg eq '--prefix' ) { $$opts{prefix}=shift(@ARGV); next; }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        if ( -e $arg ) { $$opts{vcfcheck}=$arg; next; }
        error("Unknown parameter or non-existent file \"$arg\". Run -h for help.\n");
    }
    if ( !exists($$opts{vcfcheck}) ) { error("No vcfcheck file?\n") }
    if ( !exists($$opts{prefix}) ) { error("Expected -p parameter.\n") }
    if ( $$opts{prefix}=~m{/$} ) { `mkdir -p $$opts{prefix}`; }
    elsif ( !($$opts{prefix}=~/-$/) ) { $$opts{prefix} .= '-'; }
    return $opts;
}


sub plot
{
    my ($opts) = @_;
	if ( !exists($$opts{plt_fh}) ) { return; }
	close($$opts{plt_fh}) or error("close $$opts{plt_fh}");
    my $cmd = "python $$opts{plt_file}";
    system($cmd);
    if ( $? ) { error("The command exited with non-zero status $?:\n\t$cmd\n\n"); }
}


sub parse_vcfcheck
{
    my ($opts) = @_;
    open(my $fh,'<',$$opts{vcfcheck}) or error("$$opts{vcfcheck}: $!");
    my $line = <$fh>;
    if ( !($line=~/^# This file was produced by vcfcheck/) ) { error("Sanity check failed: was this file generated by vcfcheck?"); }
    while ($line=<$fh>)
    {
        if ( $line=~/^#/ ) { next; }
        my @items = split(/\t/,$line);
        chomp($items[-1]);
        if ( $items[0] eq 'SN' )
        {
            $$opts{dat}{$items[1]}{$items[2]} = splice(@items,3);
            next;
        }
        push @{$$opts{dat}{$items[0]}{$items[1]}}, [splice(@items,2)];
    }
    close($fh);

    # Check sanity
    if ( !exists($$opts{dat}{ID}{0}) )
    {
        error("Sanity check failed: no stats found by vcfcheck??\n");
    }

	# Set titles
	my %titles;
	if ( exists($$opts{titles}) )
	{
		for (my $i=0; $i<@{$$opts{titles}}; $i++)
		{
			if ( !exists($$opts{dat}{ID}{$i}) ) { next; }
			$titles{$$opts{dat}{ID}{$i}[0][0]} = $$opts{titles}[$i];
		}
	}
	for my $id (file_ids($opts))
	{
		my @files;
		for my $file (@{$$opts{dat}{ID}{$id}[0]})
		{
			if ( exists($titles{$file}) ) { $file = $titles{$file}; }
			else 
			{ 
				$file =~ s{^.*/}{};
				$file =~ s{\.vcf\.gz$}{}i;
			}
			push @files, $file;
		}
		$$opts{title}{$id} = join(' + ',@files);
	}
}

sub file_ids
{
	my ($opts) = @_;
	my $id = 0;
	my @out;
	while ( exists($$opts{dat}{ID}) && exists($$opts{dat}{ID}{$id}) ) { push @out, $id++; }
	return @out;
}

sub iprint
{
	my ($fh,@txt) = @_;
	for my $txt (@txt)
	{
		$txt =~ s/\n\s+/\n/g;
		print $fh $txt;
	}
}

sub init_plots
{
    my ($opts) = @_;

	$$opts{plt_file} = "$$opts{prefix}/plot.py";

	my $dir = $$opts{plt_file};
	$dir =~ s{/[^/]+$}{};
	if ( $dir && $dir ne $$opts{plt_file} ) { `mkdir -p $dir`; }

	open(my $fh,'>',$$opts{plt_file}) or error("$$opts{plt_file}: $!");
	iprint $fh, qq[
		import matplotlib as mpl
		mpl.use('Agg')
		import matplotlib.pyplot as plt
		];
	$$opts{plt_fh} = $fh;
}

sub percentile
{
    my ($p,@vals) = @_;
    my $N = 0;
    for my $val (@vals) { $N += $val; }
    my $n = $p*($N+1)/100.;
    my $k = int($n);
    my $d = $n-$k;
    if ( $k<=0 ) { return 0; }
    if ( $k>=$N ) { return scalar @vals-1; }
    my $cnt;
    for (my $i=0; $i<@vals; $i++)
    { 
        $cnt += $vals[$i]; 
        if ( $cnt>=$k ) { return $i; }
    }
    error("FIXME: this should not happen [percentile]\n");
}

sub get_values
{
	my ($opts,$id,$key) = @_;
	if ( !exists($$opts{dat}{$key}) ) { return (); }
	if ( !exists($$opts{dat}{$key}{$id}) ) { return (); }
	return (@{$$opts{dat}{$key}{$id}});
}

sub get_value
{
	my ($opts,$id,$key) = @_;
	if ( !exists($$opts{dat}{$id}) ) { return undef; }
	if ( !exists($$opts{dat}{$id}{$key}) ) { return undef}
	return $$opts{dat}{$id}{$key};
}

sub plot_venn_bars
{
    my ($opts) = @_;

	my @ids  = file_ids($opts);
	if ( @ids != 3 ) { return; }

	my (@snps,@indels,@tstv,@snp_titles,@indel_titles);
	for my $id (0..2)
	{
		push @snps, get_value($opts,$id,'number of SNPs:');
		push @indels, get_value($opts,$id,'number of indels:');
		push @tstv, get_value($opts,$id,'ts/tv:');
		push @snp_titles, "$$opts{title}{$id}\\nts/tv $tstv[$id]";
		push @indel_titles, $$opts{title}{$id};
	}

    my $fh = $$opts{plt_fh};
	iprint $fh, qq[
			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
	 		ax1 = fig.add_subplot(111)
	 		ax1.bar([1,2,3],[$snps[0],$snps[2],$snps[1]],align='center',color='y')
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y') 
			plt.xticks([1,2,3],('$snp_titles[0]','$snp_titles[2]','$snp_titles[1]'))
			plt.title('Number of SNPs')
			plt.subplots_adjust(right=0.95)
	 		plt.savefig('$$opts{prefix}/venn_bars.snps.png')
	 		plt.savefig('$$opts{prefix}/venn_bars.snps.pdf')
	 		plt.close()

			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
	 		ax1 = fig.add_subplot(111)
	 		ax1.bar([1,2,3],[$indels[0],$indels[2],$indels[1]],align='center',color='r')
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y') 
			plt.xticks([1,2,3],('$indel_titles[0]','$indel_titles[2]','$indel_titles[1]'))
			plt.title('Number of indels')
			plt.subplots_adjust(right=0.95)
	 		plt.savefig('$$opts{prefix}/venn_bars.indels.png')
	 		plt.savefig('$$opts{prefix}/venn_bars.indels.pdf')
	 		plt.close()
		];
}

sub plot_tstv_by_AF
{
    my ($opts,$id) = @_;
	my @vals = get_values($opts,$id,'TsTvAF');
    if ( !@vals ) { return; }

    my $fh  = $$opts{plt_fh};
	my $img = "$$opts{prefix}/tstv_by_af.$id";

	iprint $fh, "
			dat = [
		";
	for my $val (@vals) { iprint $fh, "\t[$$val[0],$$val[1],$$val[2]],\n"; }
	iprint $fh, "]

			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
			ax1 = fig.add_subplot(111)
			ax1.plot([row[0] for row in dat], [row[1] for row in dat], color='k')
			ax1.set_ylabel('Number of sites',color='k')
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y') 
			for tl in ax1.get_yticklabels(): tl.set_color('k')
			ax1.set_xlabel('Non-reference Allele Frequency')
			ax2 = ax1.twinx()
			ax2.plot([row[0] for row in dat], [row[2] for row in dat], color='r')
			ax2.set_ylabel('Ts/Tv',color='r')
			ax2.set_ylim(0.5,3.0)
			for tl in ax2.get_yticklabels(): tl.set_color('r')
			plt.subplots_adjust(right=0.88)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()
		";
}

sub plot_indel_distribution
{
	my ($opts,$id) = @_;

	my @vals = get_values($opts,$id,'IDD');
	if ( !@vals ) { return; }

	# Set xlim to show 99 of indels but ignore outliers
	my @tmp;
	for my $id (file_ids($opts))
	{
		my @v = get_values($opts,$id,'IDD');
		for my $v (@v) { $tmp[ abs($$v[0]) ] += $$v[1]; }
	}
	my $n; 
	for my $t (@tmp) { $n += $t ? $t : 0; }
	my ($sum,$xlim);
	for ($xlim=0; $xlim<@tmp; $xlim++)
	{
		$sum += $tmp[$xlim] ? $tmp[$xlim] : 0;
		if ( $sum/$n >= 0.99 ) { last; }
	}
	if ( $xlim<20 ) { $xlim=20; }

    my $fh  = $$opts{plt_fh};
	my $img = "$$opts{prefix}/indels.$id";

	iprint $fh, "
			dat = [
		";
	for my $val (@vals) { iprint $fh, "\t[$$val[0],$$val[1]],\n"; }
	iprint $fh, "]

			fig = plt.figure(figsize=(1.5*$$opts{img_width},$$opts{img_height}))
			ax1 = fig.add_subplot(111)
			ax1.bar([row[0]-0.5 for row in dat], [row[1] for row in dat], color='y') #, edgecolor='y')
			ax1.set_xlabel('InDel Length')
			ax1.set_ylabel('Count')
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y')
			ax1.set_xlim(-$xlim,$xlim)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()
		";
}

sub plot_substitutions
{
	my ($opts,$id) = @_;

	my @vals = get_values($opts,$id,'ST');
    if ( !@vals ) { return; }

    my $fh  = $$opts{plt_fh};
	my $img = "$$opts{prefix}/substitutions.$id";

	iprint $fh, "
			dat = [
		";
	for (my $i=0; $i<@vals; $i++) { my $val=$vals[$i]; iprint $fh, "\t[$i,'$$val[0]',$$val[1]],\n"; }
	iprint $fh, "]

			fig = plt.figure(figsize=($$opts{img_width},$$opts{img_height}))
			cm  = mpl.cm.get_cmap('autumn')
			n = 12
			col = range(n)
			for i in range(n): col[i] = cm(1.*i/n)
			ax1 = fig.add_subplot(111)
			ax1.bar([row[0] for row in dat], [row[2] for row in dat], color=col)
			ax1.set_ylabel('Count')
			ax1.ticklabel_format(style='sci', scilimits=(0,0), axis='y')
			ax1.set_xlim(-0.5,n+0.5)
			plt.xticks([row[0] for row in dat],[row[1] for row in dat],rotation=45)
			plt.title('$$opts{title}{$id}')
			plt.savefig('$img.png')
			plt.savefig('$img.pdf')
			plt.close()
		";
}


sub fmt_slide
{
	my ($args, $image, $title) = @_;

	my $slide = qq[\\includegraphics[$$args{ext},width=$$args{width3}]{$image.0}];
	if ( $$args{n}==3 )
	{
		$slide .= qq[%
			\\includegraphics[$$args{ext},width=$$args{width3}]{$image.2}%
			\\includegraphics[$$args{ext},width=$$args{width3}]{$image.1}
		];
	}
	return qq[
			\\vslide[$title]{
				\\centerline{$slide}
			}
		];
}

sub create_pdf
{
	my ($opts) = @_;
	my $pwd;
	if ( -d $$opts{prefix} )
	{
		chomp(my $pwd=`pwd`);
		chdir($$opts{prefix});
	}

	my @ids     = file_ids($opts);
	my $width   = "15cm";
	my $height  = "10cm";
	my $width2  = @ids==3 ? "7.5cm" : "7cm";
	my $width3  = @ids==3 ? "4.8cm" : "7cm";
	my $height3 = @ids==3 ? "3cm" : "7cm";
	my $ext     = "type=pdf,ext=.pdf,read=.pdf";
	my $args    = { ext=>$ext, width3=>$width3, n=>scalar @ids };

	my $tex_file = "summary.tex";
	open(my $tex,'>',$tex_file) or error("$tex_file: $!");
	print $tex qq[
			\\documentclass{slides}
			\\usepackage{graphicx}
			\\usepackage[vcentering,dvips]{geometry}
			\\geometry{papersize={$width,$height},total={$width,$height}}
			\\usepackage{xifthen}
			\\newcommand*{\\vslide}[2][]{
				\\newpage
				\\vbox to$height].qq[{\\hsize=$width
					\\ifthenelse{\\isempty{#1}}
						{\\vfill#2\\vfill}
						{\\vskip0.8cm\\centerline{#1}\\vskip0.7cm #2\\vfill}}}
			\\renewcommand{\\arraystretch}{2}
				
			\\begin{document}

		];


	# Table with summary numbers
	my $slide .= q[%
		\tiny\centerline{
		\begin{tabular}{l r r r}
			Callset & \\#SNPs & Ts/Tv & \\#Indels \\\\ \hline
		];
	for my $id (@ids)
	{
		my $snps   = get_value($opts,$id,'number of SNPs:');
		my $indels = get_value($opts,$id,'number of indels:');
		my $tstv   = get_value($opts,$id,'ts/tv:');

		$slide .= qq[ $$opts{title}{$id} & $snps & $tstv & $indels \\\\ \n];
	}
	print $tex qq[%
		\\vslide[Summary numbers]{%
			$slide \\end{tabular}}
		}
	];


	# Venn bars
	if ( @ids==3 )
	{
		print $tex qq[%
			\\vslide[Total counts]{\\centerline{
				\\includegraphics[$ext,width=$width2]{venn_bars.snps}%
				\\includegraphics[$ext,width=$width2]{venn_bars.indels}
				}
			}
		];
	}

	print $tex fmt_slide($args, 'tstv_by_af', 'Ts/Tv by AF');
	print $tex fmt_slide($args, 'indels', 'Indel distribution');
	print $tex fmt_slide($args, 'substitutions', 'Substitution types');


	print $tex "\\end{document}\n";
	close($tex);

	my $cmd = "pdflatex $tex_file";
	system($cmd);
	if ( $? ) { error("The command exited with non-zero status $?:\n\t$cmd\n\n"); }

	if ( -d $$opts{prefix} ) { chdir($pwd); }
}


