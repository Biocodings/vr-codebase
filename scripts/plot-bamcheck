#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;

my $opts = parse_params();
plot_bamcheck($opts);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "Usage: plot-bamcheck [OPTIONS] file.bam.bc\n",
        "Options:\n",
        "   -o, --output-file <file>            The image file name.\n",
        "   -h, -?, --help                      This help message.\n",
        "\n";
}


sub parse_params
{
    my $opts = {};
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-o' || $arg eq '--output-file' ) { $$opts{img_fname}=shift(@ARGV); next; }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        if ( -e $arg ) { $$opts{bamcheck}=$arg; next; }
        error("Unknown parameter or non-existent file \"$arg\". Run -h for help.\n");
    }
    if ( !exists($$opts{bamcheck}) ) { error("No bamcheck file?\n") }
    return $opts;
}


sub plot_bamcheck
{
    my ($opts) = @_;

    # Set the file names
    my ($gp_file,$img_fname);
    if ( exists($$opts{img_fname}) )
    {
        $img_fname = $$opts{img_fname};
        if ( !($img_fname=~/\.png$/i) ) { error("FIXME: currently only PNG supported. (Easy to extend.)\n"); }
    }
    else
    {
        $img_fname = $$opts{bamcheck}.'.png';
    }

    # Determine the gnuplot script file name
    $gp_file = $img_fname;
    $gp_file =~ s{\.[^.]+$}{.gp};
    if ( !($gp_file=~/.gp$/) ) { $gp_file .= '.gp'; }

    # Determine the default title:
    #       5446_6/5446_6.bam.bc.gp -> 5446_6
    #       test.aaa.png -> test.aaa
    if ( !($img_fname=~m{([^/]+?)(?:\.bam\.bc)?(?:\.png)$}i) ) { error("FIXME: Could not determine the title from [$img_fname]\n"); }
    my $title = $1;
    
    # Create the gnuplot script. Quick solution: the script relies on backticks and unix commands, may be changed in future
    open(my $fh,'>',$gp_file) or error("$gp_file: $!");
    print $fh q[

set terminal png size 600,500 truecolor font "DejaVuSansMono,9"
set output "] . $img_fname . q["

unset key
unset colorbox

set palette defined (0 0 0 0, 1 0 0 1, 3 0 1 0, 4 1 0 0, 6 1 1 1)

max_val = `grep -v ^# ] . $$opts{bamcheck} . q[ | cut -f 2- | sed 's,\s\s*,\n,g' | awk '{if($1>max)max=$1}END{print max}'`
set cbrange [0:max_val]

nquals  = (`cat ] . $$opts{bamcheck} . q[ | grep '^1 ' | sed 's,\s\s*,\n,g' |wc -l` - 2)
set xrange [0:nquals]

set view map
set multiplot

set origin 0,0.46
set rmargin 0 
set lmargin 0 
set tmargin 0 
set bmargin 0 
set size 1.0,0.6
set ylabel "1st fragment" offset character -0.5,0
unset ytics
set ytics (`grep -v -e ^# -e ^- ] . $$opts{bamcheck} . q[ | awk '{if ($1%20==0) printf "\"%s\" %s,",$1,NR}END{printf "\"\" 0\n"}'`)
unset xtics
set title "] . $title . q["
splot '< grep -v -e ^# -e ^- ] . $$opts{bamcheck} . q[ | cut -d " " -f 2-' matrix with image

set origin 0,0.03
set rmargin 0 
set lmargin 0 
set tmargin 0 
set bmargin 0 
set size 1.0,0.6
set ylabel "Last fragment" offset character -0.5,0
set xlabel "Base Quality"
unset title
unset ytics
set ytics (`grep ^- ] . $$opts{bamcheck} . q[ | sed 's,^-,,' | awk '{if ($1%20==0) printf "\"%s\" %s,",$1,NR}END{printf "\"\" 0\n"}'`)
set xtics
set colorbox vertical user origin first (nquals+1),0 size screen 0.025,0.812
splot '< grep ^- ] . $$opts{bamcheck} . q[ | cut -d " " -f 2-' matrix with image
set nomultiplot

];
    close($fh);

    system("export GDFONTPATH=/usr/share/fonts/truetype/ttf-dejavu/; gnuplot $gp_file");
}



