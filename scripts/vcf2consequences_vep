#!/usr/bin/env perl
# Add Consequences to VCF, post-processing Ensembl VEP script output and adding GERP and Grantham matrix scores
#

use strict;
use warnings;
use Carp;
use DBI;
use Data::Dumper; 
use Getopt::Long;
use Benchmark;

use Vcf;
use GranthamMatrix;
use DB_File;
$DB_HASH->{'cachesize'}=2000000000;

=pod
foreach( keys( %INC ) )
{
    print qq[$_ - $INC{$_}\n];
}
=cut

my ($input_vcf, $complement, $index_vcf, $help, $vep_input, $gerp_cache_dir, $grantham, $passonly);

GetOptions
(
    "v|vcf=s"       => \$input_vcf,
    "i|vep=s"    => \$vep_input,
    "g|gerp=s"    => \$gerp_cache_dir,
    "r|grantham"    => \$grantham,
    "h|help"        => \$help
);

my $missing = 0;
if( ! $vep_input || $help ){$missing = 1;}

if( $missing )
{
    print qq[
This is a script to call consequences on a set of SNPs in a VCf file
by querying Ensembl
Usage:
    -v --vcf <string>       VCF input file
    -i --vep                Input from Ensembl VEP
    -g --gerp               OPTIONAL: location of DB_File cached gerp scores
    -r --grantham           OPTIONAL: Add Grantham matrix score to consequences for nsSNPS
    -h --help               Print this message
];
    exit;
}

my $t0 = Benchmark->new;
my $grantham_matrix = GranthamMatrix->new() if $grantham;
my $vep_cache = { chr=>'0', pos=>'0', conseq=>{}};
my $gerp_cache = { blocksize => 10000000, chr=>'', block=>'', scores=>{}};

open VEP_FILE, $vep_input or die $!;
our $vep_rec = <VEP_FILE>;
while ($vep_rec =~ /^#/) {
	$vep_rec = <VEP_FILE>;
}

parse_vcf($input_vcf);
my $t1 = Benchmark->new;
my $td = timediff($t1, $t0);
print STDERR "The consequences calculations took:",timestr($td),"\n";
close(VEP_FILE);
    
exit;

#------------------------------

sub parse_vcf
{
    my $tp0 = Benchmark->new;
    my ($input_vcf) = @_;

    my $vcf = defined $input_vcf ? Vcf->new(file=>$input_vcf) : Vcf->new(fh=>\*STDIN);
    $vcf->parse_header();
    $vcf->add_header_line({key=>'INFO',ID=>'CSQ',Number=>-1,Type=>'String',Description=>"Consequence of the ALT alleles from Ensembl VEP"});
    print $vcf->format_header();

    my $lines = 0;
    
    while( my $rec = $vcf->next_data_array() )
    {
        #print STDERR "CHR: ", $$rec[0], ", POS: ", $$rec[1], ", REF: ", $$rec[3], ", ALTS: ", $$rec[4], "\n";
		process_rec($vcf,$rec);
        
        $lines ++;
    }

    my $tp1 = Benchmark->new;
    my $tpd = timediff($tp1, $tp0);
    print STDERR "Processing $lines lines took:",timestr($tpd),"\n";    
}


sub process_rec
{
    my ($vcf,$rec) = @_;
	my $chr = $$rec[0];
	my $pos = $$rec[1];
	my $alleles = join("/",$$rec[3],$$rec[4]);
    my $vcfkey = join("_", $chr,$pos,$alleles);

	if ($chr ne $vep_cache->{chr} or $pos != $vep_cache->{pos}) {
		fetch_vep_conseq($vcfkey);
	}

	if ($gerp_cache_dir && $$rec[7] !~ '^INDEL') {
			my $gerp_csq;
			if ($chr ne $gerp_cache->{chr} or int($pos/$gerp_cache->{blocksize}) != $gerp_cache->{block}) {
				$gerp_cache->{chr} = $chr;
				$gerp_cache->{block} = int($pos/$gerp_cache->{blocksize});

				# eg "<dir>/gerp.X.1.dbf";
				my $dbf = join('.', "$gerp_cache_dir/gerp", $gerp_cache->{chr}, $gerp_cache->{block}, "dbf");

				%{$gerp_cache->{scores}}=();
				my $db = tie %{$gerp_cache->{scores}}, "DB_File", $dbf, O_RDONLY, 0666, $DB_HASH or die "Cannot tie $dbf: $!\n";
			}
			my $score = $gerp_cache->{scores}->{$pos};
			if ($score) {
				$gerp_csq = sprintf ("GERP,%.2f", $score);
			}
			else {
				$gerp_csq = "GERP,undef";
			}
			push (@{$vep_cache->{conseq}{$alleles}},$gerp_csq);
	}

	if ($vep_cache->{conseq}{$alleles}) {
		my $conseqences = join('+',sort @{$vep_cache->{conseq}{$alleles}});
    	$$rec[7] = $vcf->add_info_field($$rec[7],'CSQ'=>$conseqences);
	}

	print join("\t",@$rec)."\n";
}

sub fetch_vep_conseq
{
    my ($vcfkey) = @_;
	my ($chr,$pos,$alleles) = split("_",$vcfkey);
	#print "fetch_vep_conseq for: $chr,$pos,$alleles, vep_rec=$vep_rec\n";

	$vep_cache->{chr}=$chr;
	$vep_cache->{pos}=$pos;
	$vep_cache->{conseq} = ();

	chomp $vep_rec;
	my ($vep_key, $Location, $Allele, $Gene, $Feature, $Feature_type, $Consequence, $cDNA_position, $CDS_position, $Protein_position, $Amino_acids, $Codons, $Existing_variation, $Extra) = split("\t",$vep_rec);

	my ($vep_chr,$vep_pos,$vep_alleles) = split("_", $vep_key);
	
	while ($vep_chr ne $chr or $vep_pos < $pos) {
		$vep_rec = <VEP_FILE>;
		($vep_key, $Location, $Allele, $Gene, $Feature, $Feature_type, $Consequence, $cDNA_position, $CDS_position, $Protein_position, $Amino_acids, $Codons, $Existing_variation, $Extra) = split("\t",$vep_rec);
		($vep_chr,$vep_pos,$vep_alleles) = split("_", $vep_key);
	}

	while ($vep_chr eq $chr && $vep_pos == $pos) {

		if ( $Consequence eq 'DOWNSTREAM' or $Consequence eq 'UPSTREAM' or $Consequence eq 'INTERGENIC' ) {
			$vep_rec = <VEP_FILE>;
			last if !$vep_rec;
			chomp $vep_rec;
			($vep_key, $Location, $Allele, $Gene, $Feature, $Feature_type, $Consequence, $cDNA_position, $CDS_position, $Protein_position, $Amino_acids, $Codons, $Existing_variation, $Extra) = split("\t",$vep_rec);
			($vep_chr,$vep_pos,$vep_alleles) = split("_", $vep_key);
			next;
		}

		my $gene_name="";
		my ($sift_pred,$polyphen_pred,$condel_pred);
		my @extra_cols = split(/;/, $Extra);	# eg PolyPhen=unknown(0);SIFT=tolerated(0.56);HGNC=RERE
		foreach (@extra_cols) {
			my ($key,$val) = split(/=/);
			$gene_name = $val if $key eq 'HGNC';
			$sift_pred = "$key,$val" if $key eq 'SIFT';
			$polyphen_pred = "$key,$val" if $key eq 'PolyPhen';
			$condel_pred = "$key,$val" if $key eq 'Condel';
		}

		my $consequence = "$Feature";
		$consequence .= ":$gene_name" if $gene_name;
		$consequence .= ":$Consequence";

		if ( $Consequence eq 'NON_SYNONYMOUS_CODING') {
			my $protein_pred="";
			$protein_pred .= ":$sift_pred" if $sift_pred;
			$protein_pred .= ":$polyphen_pred" if $polyphen_pred;
			$protein_pred .= ":$condel_pred" if $condel_pred;

			if ($grantham) {
				my ($ref_aa,$var_aa) = split(/\//,$Amino_acids);
				print STDERR "[GERP:$vep_key,$Amino_acids,$ref_aa,$var_aa]\n";
				$protein_pred .= ":Grantham," . $grantham_matrix->score($ref_aa,$var_aa);
			}
			$Amino_acids =~ s/\//>/;

			$consequence .= ":$Amino_acids" if $Amino_acids ne '-';
			$consequence .= $protein_pred if $protein_pred ne "";
		}

		# Fix to split WITHIN_NON_CODING_GENE,INTRONIC ?
#		if ($consequence =~ 'WITHIN_NON_CODING_GENE,INTRONIC') {
#			$consequence =~ s/WITHIN_NON_CODING_GENE,INTRONIC/WITHIN_NON_CODING_GENE/;
#			push (@{$vep_cache->{conseq}{$vep_alleles}},$consequence);
#			$consequence =~ s/WITHIN_NON_CODING_GENE/INTRONIC/;
#		}

		push (@{$vep_cache->{conseq}{$vep_alleles}},$consequence);

		$vep_rec = <VEP_FILE>;
		last if !$vep_rec;
		chomp $vep_rec;
		($vep_key, $Location, $Allele, $Gene, $Feature, $Feature_type, $Consequence, $cDNA_position, $CDS_position, $Protein_position, $Amino_acids, $Codons, $Existing_variation, $Extra) = split("\t",$vep_rec);
		($vep_chr,$vep_pos,$vep_alleles) = split("_", $vep_key);
	}

	#print "CACHE $chr:$pos ", Dumper($vep_cache->{conseq});
}

