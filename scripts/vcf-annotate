#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;
use Vcf;

my %filters =
(
    MinAB        => { dflt=>2, usage=>'INT', desc=>'Minimum number of alternate bases', nick=>'a' },
    SnpCluster   => { dflt=>undef, usage=>'INT1,INT2', desc=>"Filters clusters of 'INT1' or more SNPs within a run of 'INT2' bases", nick=>'c' },
    MinDP        => { dflt=>2, usage=>'INT', desc=>"Minimum read depth", nick=>'d' },
    MaxDP        => { dflt=>10_000_000, usage=>'INT', desc=>"Maximum read depth", nick=>'D' },
    MinMQ        => { dflt=>10, usage=>'INT', desc=>"Minimum RMS mapping quality for SNPs", nick=>'q' },
    SnpGap       => { dflt=>10, usage=>'INT', desc=>"SNP within INT bp around a gap to be filtered", nick=>'w' },
    GapWin       => { dflt=>10, usage=>'INT', desc=>"Window size for filtering adjacent gaps", nick=>'W' },
    StrandBias   => { dflt=>1e-4, usage=>'FLOAT', desc=>"Min P-value for strand bias (given PV4)", nick=>'1' },
    BaseQualBias => { dflt=>1e-100, usage=>'FLOAT', desc=>"Min P-value for baseQ bias", nick=>'2' },
    MapQualBias  => { dflt=>0, usage=>'FLOAT', desc=>"Min P-value for mapQ bias", nick=>'3' },
    EndDistBias  => { dflt=>1e-4, usage=>'FLOAT', desc=>"Min P-value for end distance bias", nick=>'4' },
    RefN         => { dflt=>'', usage=>'', desc=>"Reference base is N", nick=>'r' },
    Qual         => { dflt=>'10', usage=>'INT', desc=>"Minimum value of the QUAL field", nick=>'Q' },
);

my $opts = parse_params();
annotate($opts);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }

    my @filters;
    for my $key (sort {lc($filters{$a}{nick}) cmp lc($filters{$b}{nick})} keys %filters)
    {
        push @filters, sprintf("\t%s, %-25s\t\t%s [%s]\n", $filters{$key}{nick},$key.'  '.$filters{$key}{usage},$filters{$key}{desc},defined($filters{$key}{dflt})? $filters{$key}{dflt} : '');
    }

    die
        "About: Annotates VCF file, adding filters or custom annotations. Requires tabix indexed file with annotations.\n",
        "   Currently annotates only the INFO column, but it will be extended on demand.\n",
        "Usage: cat in.vcf | vcf-annotate [OPTIONS] > out.vcf\n",
        "Options:\n",
        "   -a, --annotations <file.gz>         The tabix indexed file with the annotations: CHR\\tFROM[\\tTO][\\tVALUE]+.\n",
        "   -c, --columns <list>                The list of columns in the annotation file, e.g. CHROM,FROM,TO,-,INFO/STR,INFO/GN. The dash\n",
        "                                           in this example indicates that the third column should be ignored. If TO is not\n",
        "                                           present, it is assumed that TO equals to FROM.\n",
        "   -d, --description <file|string>     Header annotation, e.g. key=INFO,ID=HM2,Number=0,Type=Flag,Description='HapMap2 membership'.\n",
        "                                           The descriptions can be read from a file, one annotation per line.\n",
        "   -f, --filter <list>                 Apply filters, list is in the format flt1=value/flt2/flt3=value/etc.\n",
        "   -h, -?, --help                      This help message.\n",
        "Filters:\n",
        sprintf("\t+  %-25s\t\tApply all filters with default values (can be overriden, see the example below).\n",''),
        sprintf("\t-X %-25s\t\tExclude the filter X\n",''),
        join('',@filters),
        "Example:\n",
        "   zcat in.vcf.gz | vcf-annotate -a annotations.gz -d descriptions.txt | bgzip -c >out.vcf.gz \n",
        "   zcat in.vcf.gz | vcf-annotate -f +/-a/c=3,10/q=3/d=5/-D -a annotations.gz -d descriptions.txt | bgzip -c >out.vcf.gz \n",
        "Where descriptions.txt contains:\n",
        "   key=INFO,ID=GN,Number=1,Type=String,Description='Gene Name'\n",
        "   key=INFO,ID=STR,Number=1,Type=Integer,Description='Strand'\n",
        "\n";
}

sub parse_params
{
    my $opts = { args=>[$0, @ARGV], };
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-d' || $arg eq '--description' ) 
        { 
            my $desc = shift(@ARGV);
            if ( -e $desc )
            {
                open(my $fh,'<',$desc) or error("$desc: $!");
                while (my $line=<$fh>)
                {
                    if ( $line=~/^\s*$/ or $line=~/^#/ ) { next; }
                    chomp($line);
                    push @{$$opts{desc}}, $line;
                }
                close($fh);
            }
            else
            {
                push @{$$opts{desc}}, $desc; 
            }
            next;
        }
        if ( $arg eq '-f' || $arg eq '--filter' )
        {
            my $filter = shift(@ARGV);
            parse_filters($opts,$filter);
            next;
        }
        if ( $arg eq '-c' || $arg eq '--columns' ) 
        { 
            my $cols = shift(@ARGV);
            $$opts{cols} = [ split(/,/,$cols) ];
            next; 
        }
        if ( $arg eq '-a' || $arg eq '--annotations' ) { $$opts{annotations} = shift(@ARGV); next }
        if ( $arg eq '-t' || $arg eq '--tag' ) { $$opts{tag} = shift(@ARGV); next }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        if ( -e $arg ) { $$opts{file}=$arg; next; }
        error("Unknown parameter \"$arg\". Run -h for help.\n");
    }
    if ( !exists($$opts{filters}) )
    {
        if ( !exists($$opts{desc}) ) { error("Missing the -d option and no filters given? (Check the -f option.)\n") }
        if ( !exists($$opts{annotations}) ) { error("Missing the -a option.\n") }
    }
    if ( exists($$opts{annotations}) && !exists($$opts{cols}) ) { error("Missing the -c option.\n"); }
    return $opts;
}

sub parse_filters
{
    my ($opts,$str) = @_;

    my $has_filters = 0;
    my $set_defaults = 0;
    my @filters = split(m{/},$str);
    for my $fltr (@filters)
    {
        if ( $fltr eq '+' ) { $set_defaults=1; last; }
    }

    my %mapping;
    for my $flt (keys %filters)
    {
        $mapping{$filters{$flt}{nick}} = $flt;

        if ( !defined($filters{$flt}{dflt}) ) { next; }
        if ( $set_defaults )
        {
            $$opts{filters}{$flt} = $filters{$flt}{dflt};
        }
    }

    for my $filter (@filters)
    {
        my ($key,$val) = split(/=/,$filter);
        if ( $key eq '+' ) { next; }
        my $to_be_deleted = 0;
        if ( $key=~/^-(.+)$/ ) { $to_be_deleted=1; $key = $1; }
        if ( !exists($filters{$key}) && !exists($mapping{$key}) ) { error("The filter [$key] not recognised.\n"); }
        if ( $to_be_deleted ) { delete($$opts{filters}{$key}); next; }

        if ( $key eq 'c' || $key eq 'SnpCluster' ) 
        { 
            ($$opts{SnpCluster_count},$$opts{SnpCluster_win}) = split(/,/,$val);

            # Simple sanity check
            if ( $$opts{SnpCluster_count}>$$opts{SnpCluster_win} ) 
            { 
                error("Did you really mean snpCluster=$$opts{SnpCluster_count},$$opts{SnpCluster_win}? The win (INT2) must be bigger or equal to count (INT1)."); 
            }
            $$opts{SnpCluster_buffer} = [];
            push @{$$opts{desc}}, "key=FILTER,ID=SnpCluster,Description='$filters{SnpCluster}{desc} [win=$$opts{SnpCluster_win},count=$$opts{SnpCluster_count}]'";
            $has_filters = 1;
            next;
        }

        if ( !exists($filters{$key}) ) { $key = $mapping{$key}; }
        $$opts{filters}{$key} = $val;
        $has_filters = 1;
    }
    for my $key (keys %{$$opts{filters}})
    {
        push @{$$opts{desc}}, "key=FILTER,ID=$key,Description='$filters{$key}{desc}" . (defined $$opts{filters}{$key} ? " [$$opts{filters}{$key}]'" : "'");
    }
    if ( !$has_filters && !scalar keys %{$$opts{filters}} ) { delete($$opts{filters}); }
}


# Convert text descriptions given on command line to hashes which will be 
#   passed to Vcf::add_header_line
sub parse_descriptions
{
    my ($descs) = @_;
    my @out;
    for my $str (@$descs)
    {
        my $desc = {};
        my $tmp = $str;
        while ($tmp)
        {
            my ($key,$value);
            if ( $tmp=~/^([^=]+)=["']([^\"]+)["']/ ) { $key=$1; $value=$2; }
            elsif ( $tmp=~/^([^=]+)=([^,"]+)/ && $1 eq 'Description' ) 
            {
                # The command line eats the quotes
                $key=$1; $value=$2.$';
                $$desc{$key} = $value;
                last;
            }
            elsif ( $tmp=~/^([^=]+)=([^,"]+)/ ) 
            { 
                $key=$1; $value=$2; 
            }
            else { error(qq[Could not parse the description: [$str]\n]); }
            $$desc{$key} = $value;

            $tmp = $';
            if ( $tmp=~/^,/ ) { $tmp = $'; }

        }
        if ( !exists($$desc{ID}) ) { error("No ID in description? [$str]\n"); }
        push @out, $desc;
    }
    return \@out;
}

# Create mapping from the annotation IDs to column indexes. The mapping is used
#   to determine which columns should be used from the annotation file. The
#   following structure is returned:
#       { 
#           CHROM => col_idx,
#           FROM  => col_idx,
#           TO    => col_idx,
#           annots => 
#           [
#               { col=>col_idx, id=>annot_id, vcf_col=>vcf_column, is_flag=>0 },
#           ]
#       }
#   If {annots}{is_flag} is nonzero, "annot_id" will be written to VCF instead of "annot_id=value".
#   Currently only one VCF column (INFO) is supported. 
#
sub parse_columns
{
    my ($cols,$descriptions) = @_;

    my %desc = ();
    my %out  = ( annots=>[] );

    if ( !defined $cols ) { return \%out; }

    for my $d (@$descriptions)
    {
        $desc{$$d{key}.'/'.$$d{ID}} = $d;
    }

    for (my $i=0; $i<@$cols; $i++)
    {
        my $col = $$cols[$i];

        if ( $col eq '-' ) { next; }
        elsif ( exists($desc{$col}) ) 
        {
            if ( !($col=~m{^(.+)/(.+)$}) ) { error("Could not parse the column [$col].\n"); }
            my $key = $1;
            my $id  = $2;
            my $rec = { col=>$i, id=>$id, vcf_col=>$key, is_flag=>($desc{$col}{Type} eq 'Flag' ? 1 : 0) };
            push @{$out{annots}}, $rec;
            if ( $key ne 'INFO' ) { error("TODO: other than INFO columns\n"); }
        }
        elsif ( $col eq 'CHROM' ) { $out{$col}=$i; }
        elsif ( $col eq 'FROM' ) { $out{$col}=$i; }
        elsif ( $col eq 'TO' ) { $out{$col}=$i; }
        else { error("Missing the -d parameter for the column [$col]\n"); }
    }
    if ( !exists($out{CHROM}) ) { $out{CHROM}=0; }
    if ( !exists($out{FROM}) ) { $out{FROM}=1; }
    if ( !exists($out{TO}) ) { $out{TO}=$out{FROM}; }
    return \%out;
}

sub annotate
{
    my ($opts) = @_;

    # Init the variables
    my $descs = parse_descriptions($$opts{desc});
    my $cols  = parse_columns($$opts{cols},$descs);

    # Open VCF file and add all required header lines
    my $vcf = $$opts{vcf} = exists($$opts{file}) ? Vcf->new(file=>$$opts{file}) : Vcf->new(fh=>\*STDIN);
    $vcf->parse_header();
    for my $desc (@$descs)
    {
        $vcf->add_header_line($desc,silent=>1);
    }
    $vcf->add_header_line({key=>'source',value=>join(' ',@{$$opts{args}})},append=>'timestamp');
    print $vcf->format_header();

    my $reader = Reader->new(file=>$$opts{annotations});

    my ($prev_chr,$prev_pos,$annot_from,$annot_to,$annot_line);
    my @annots = @{$$cols{annots}};


    # Process the file
    while (my $line = $vcf->next_line())
    {
        my @rec = split(/\t/,$line);
        my $chr = $rec[0];
        my $pos = $rec[1];
        chomp($rec[-1]);

        # Check if the current annotation reader has the right chromosome
        if ( !$prev_chr || $prev_chr ne $chr )
        {
            $reader->open(region=>$chr);
            undef $annot_line;
        }
        else
        {
            # Still on the same chromosome, check the order
            if ( $pos<$prev_pos ) { error("The VCF file not sorted, $chr:$pos comes after $prev_pos\n"); }
        }

        # Get the corresponding annotation, the order is guaranteed by tabix
        while (1)
        {
            if ( defined $annot_line && $annot_from<=$pos && $annot_to>=$pos ) 
            { 
                # The VCF matches the annotation
                last; 
            }

            $annot_line = $reader->next_line();
            if ( !defined $annot_line ) { last; }

            $annot_from = $$annot_line[ $$cols{FROM} ];
            $annot_to   = $$annot_line[ $$cols{TO} ];

            if ( $annot_from>$pos )
            {
                # The annotation file is ahead of VCF
                $reader->unread_line($annot_line);
                undef $annot_line;
                last;
            }
            # The VCF is ahead or it matches the annotation. The latter will be checked at 
            #   the beginning of this loop
        }

        # Is there a record in the annotation file which describes the VCF record $chr:$pos?
        if ( defined($annot_line) )
        {
            # Sanity check, this should be always true
            if ( $annot_from>$pos or $annot_to<$pos ) { error("FIXME: Annotation $chr:$annot_from-$annot_to vs VCF $chr:$pos??\n"); }

            # Existing annotations will be overwritten if they have the same name
            my %values = ();
            for my $info (@annots)
            {
                my $val = $$annot_line[$$info{col}];
                chomp($val);

                if ( $val eq '' or $val eq '.' ) { $val=undef; }       # Existing annotation should be removed
                elsif ( $$info{is_flag} )
                {
                    if ( $val ) { $val=''; }            # Flag annotation should be added
                    else { $val=undef; }                # Flag annotation should be removed
                }
                $values{$$info{id}} = $val;
            }

            $rec[7] = $vcf->add_info_field($rec[7],%values);
        }

        # Output the line
        output_line($opts,\@rec);

        $prev_chr = $chr;
        $prev_pos = $pos;
    }

    # Output any lines left in the buffer
    output_line($opts);
}


# Stage the lines and then apply filtering if requested, otherwise just print the line
sub output_line
{
    my ($opts,$line) = @_;

    if ( !exists($$opts{filters}) )
    {
        # No filters requested, print the line
        print_line($line);
        return;
    }

    if ( defined $line && scalar keys %{$$opts{filters}} )
    {
        # Local filters return the line back immediately
        $line = apply_local_filters($opts,$line);
    }

    # Staging filters may return nothing or multiple lines. If $line is not defined, they will
    #   empty the buffers
    my @lines;
    if ( exists($$opts{filters}{SnpGap}) )
    {
        @lines = apply_snpgap_filter($opts,$line);
        if ( defined $line && !scalar @lines ) { return; }
    }
    elsif ( defined $line ) { @lines=($line); }

    if ( exists($$opts{filters}{GapWin}) )
    {
        my @tmp;
        if ( !defined $line ) { push @lines,undef; }
        for my $line (@lines)
        {
            push @tmp, apply_gapwin_filter($opts,$line);
        }
        @lines = @tmp;
    }
 
    if ( exists($$opts{SnpCluster_count}) )
    {
        my @tmp;
        if ( !defined $line ) { push @lines,undef; }
        for my $line (@lines)
        {
            push @tmp, apply_snpcluster_filter($opts,$line);
        }
        @lines = @tmp;
    }

    for my $line (@lines)
    {
        print_line($line);
    }
}

sub apply_local_filters
{
    my ($opts,$line) = @_;

    if ( !defined $line ) { return; }

    my $filters = $$opts{filters};
    my %apply;

    my ($dp,$dp_alt,$mq);
    if ( $$line[7]=~/DP4=(\d+),(\d+),(\d+),(\d+)/i )
    {
        $dp = $1 + $2 + $3 + $4;
        $dp_alt = $3 + $4;
    }
    if ( $$line[7]=~/DP=(\d+)/i ) { $dp = $1; }
    if ( $$line[7]=~/MQ=(\d+)/i ) { $mq = $1; }

    if ( exists($$filters{RefN}) )
    {
        $apply{RefN} = $$line[3] eq 'N' ? 1 : 0;
    }
    if ( exists($$filters{Qual}) && $$line[5] ne '.' )
    {
        $apply{Qual} = $$line[5] < $$filters{Qual} ? 1 : 0;
    }
    if ( defined $dp_alt )
    {
        if ( exists($$filters{MinAB}) )
        {
            $apply{MinAB} = $dp_alt < $$filters{MinAB} ? 1 : 0;
        }
    }
    if ( defined $dp ) 
    {
        if ( exists($$filters{MinDP}) )
        {
            $apply{MinDP} = $dp < $$filters{MinDP} ? 1 : 0;
        }
        if ( exists($$filters{MaxDP}) )
        {
            $apply{MaxDP} = $dp > $$filters{MaxDP} ? 1 : 0;
        }
    }
    if ( defined $mq )
    {
        if ( exists($$filters{MinMQ}) )
        {
            $apply{MinMQ} = $mq < $$filters{MinMQ} ? 1 : 0;
        }
    }
    if ( $$line[7]=~/PV4=([^,]+),([^,]+),([^,]+),([^,;\t]+)/ )
    {
        if ( exists($$filters{StrandBias}) ) 
        { 
            $apply{StrandBias} = $1 < $$filters{StrandBias} ? 1 : 0;
        }
        if ( exists($$filters{BaseQualBias}) ) 
        { 
            $apply{BaseQualBias} = $1 < $$filters{BaseQualBias} ? 1 : 0;
        }
        if ( exists($$filters{MapQualBias}) ) 
        { 
            $apply{MapQualBias} = $1 < $$filters{MapQualBias} ? 1 : 0;
        }
        if ( exists($$filters{EndDistBias}) ) 
        { 
            $apply{EndDistBias} = $1 < $$filters{EndDistBias} ? 1 : 0;
        }
    }
    if ( scalar keys %apply )
    {
        $$line[6] = $$opts{vcf}->add_filter($$line[6],%apply);
    }
    return $line;
}

sub apply_snpgap_filter
{
    my ($opts,$line) = @_;
    if ( !exists($$opts{SnpGap_buffer}) ) { $$opts{SnpGap_buffer}=[]; }

    my $vcf = $$opts{vcf};
    my $win = $$opts{filters}{SnpGap};
    my $buffer = $$opts{SnpGap_buffer};
    my ($indel_chr,$indel_pos,$to);

    if ( defined $line )
    {
        # There may be multiple variants, look for an indel. Anything what is not ref can be filtered.
        my $is_indel = 0;
        my $can_be_filtered = 0;
        for my $alt (split(/,/,$$line[4]))
        {
            my ($type,$len,$ht) = $vcf->event_type($$line[3],$alt);
            if ( $type eq 'i' ) 
            { 
                $is_indel = 1; 
                $indel_chr = $$line[0];
                $indel_pos = $$line[1]+1;
            }
            elsif ( $type ne 'r' ) { $can_be_filtered = 1; }
        }
        # The indel boundaries are based on REF (POS+1,POS+rlen-1). This is not
        #   correct as the indel can begin anywhere in the VCF4.x record with
        #   respect to POS. Specifically mpileup likes to write REF=CAGAGAGAGA
        #   ALT=CAGAGAGAGAGA. Thus this filtering is more strict and may remove
        #   some valid SNPs.
        $to = $is_indel ? $$line[1]+length($$line[3])-1 : $$line[1];
        push @$buffer, { line=>$line, chr=>$$line[0], from=>defined $indel_pos ? $indel_pos : $$line[1], to=>$to, exclude=>0, can_be_filtered=>$can_be_filtered, is_indel=>$is_indel };
    }

    my $n = @$buffer;

    # Is the new line an indel? If yes, check the distance to all previous lines
    if ( defined $indel_chr )
    {
        for (my $i=0; $i<$n-1; $i++)
        {
            my $buf = $$buffer[$i];
            if ( $$buf{chr} ne $indel_chr ) { next; }
            if ( !$$buf{can_be_filtered} ) { next; }
            if ( $$buf{is_indel} ) { next; }
            if ( $$buf{to}>=$indel_pos-$win ) { $$buf{exclude}=1; }
        }
    }

    if ( defined $line && $$buffer[0]{chr} eq $$buffer[-1]{chr} && $win+$$buffer[0]{to}>=$$buffer[-1]{from} )
    {
        # There are not enough rows in the buffer: the SnpGap window spans them all. Wait until there is more rows
        #   or a new chromosome
        return ();
    }

    # 'Look-behind' filtering was done above, now comes 'look-ahead' filtering
    my $indel_to;
    for (my $i=0; $i<$n; $i++)
    {
        my $buf = $$buffer[$i];
        if ( $$buf{is_indel} )
        {
            $indel_to  = $$buf{to};
            $indel_chr = $$buf{chr};
            next;
        }
        if ( !defined $indel_to ) { next; }
        if ( !$$buf{can_be_filtered} ) { next; }
        if ( $$buf{chr} ne $indel_chr ) 
        {
            undef $indel_to;
            next;
        }
        if ( $$buf{from}<=$indel_to+$win ) { $$buf{exclude}=1; }
    }

    # Output. If no $line was given, output everything
    $to = $$buffer[-1]{from}-$win;
    my $chr = $$buffer[-1]{chr};
    my @out;
    while (@$buffer)
    {
        if ( $$buffer[0]{chr} eq $chr && $$buffer[0]{to}+$win>=$to && defined $line ) { last; }

        my $buf = shift(@$buffer);
        if ( $$buf{exclude} )
        {
            $$buf{line}[6] = $$opts{vcf}->add_filter($$buf{line}[6],'SnpGap'=>1); 
        }
        else
        {
            $$buf{line}[6] = $$opts{vcf}->add_filter($$buf{line}[6],'SnpGap'=>0); 
        }
        push @out,$$buf{line};
    }
    return @out;
}


sub apply_gapwin_filter
{
    my ($opts,$line) = @_;
    if ( !exists($$opts{GapWin_buffer}) ) { $$opts{GapWin_buffer}=[]; }

    my $vcf = $$opts{vcf};
    my $win = $$opts{filters}{GapWin};
    my $buffer = $$opts{GapWin_buffer};
    my ($indel_chr,$indel_pos,$to);

    if ( defined $line )
    {
        # There may be multiple variants, only indels can be filtered
        my $is_indel = 0;
        for my $alt (split(/,/,$$line[4]))
        {
            my ($type,$len,$ht) = $vcf->event_type($$line[3],$alt);
            if ( $type eq 'i' ) 
            { 
                $is_indel = 1; 
                $indel_chr = $$line[0];
                $indel_pos = $$line[1] + 1;
            }
        }
        # The indel boundaries are based on REF (POS+1,POS+rlen-1). This is not
        #   correct as the indel can begin anywhere in the VCF4.x record with
        #   respect to POS. Specifically mpileup likes to write REF=CAGAGAGAGA
        #   ALT=CAGAGAGAGAGA. Thus this filtering is more strict and may remove
        #   some valid SNPs.
        $to = $is_indel ? $$line[1]+length($$line[3])-1 : $$line[1];
        push @$buffer, { line=>$line, chr=>$$line[0], from=>defined $indel_pos ? $indel_pos : $$line[1], to=>$to, exclude=>0, is_indel=>$is_indel };
    }

    my $n = @$buffer;

    # Is the new line an indel? If yes, check the distance to all previous lines
    if ( defined $indel_chr )
    {
        for (my $i=0; $i<$n-1; $i++)
        {
            my $buf = $$buffer[$i];
            if ( $$buf{chr} ne $indel_chr ) { next; }
            if ( !$$buf{is_indel} ) { next; }
            if ( $$buf{to}>=$indel_pos-$win ) { $$buf{exclude}=1; $$buffer[-1]{exclude}=1; }
        }
    }

    if ( defined $line && $$buffer[0]{chr} eq $$buffer[-1]{chr} && $win+$$buffer[0]{to}>=$$buffer[-1]{from} )
    {
        # There are not enough rows in the buffer: the GapWin window spans them all. Wait until there is more rows
        #   or a new chromosome
        return ();
    }

    # Output. If no $line was given, output everything
    $to = $$buffer[-1]{from}-$win;
    my $chr = $$buffer[-1]{chr};
    my @out;
    while (@$buffer)
    {
        if ( $$buffer[0]{chr} eq $chr && $$buffer[0]{to}+$win>=$to && defined $line ) { last; }

        my $buf = shift(@$buffer);
        if ( $$buf{exclude} )
        {
            $$buf{line}[6] = $$opts{vcf}->add_filter($$buf{line}[6],'GapWin'=>1); 
        }
        else
        {
            $$buf{line}[6] = $$opts{vcf}->add_filter($$buf{line}[6],'GapWin'=>0); 
        }
        push @out,$$buf{line};
    }
    return @out;
}


sub apply_snpcluster_filter
{
    my ($opts,$line) = @_; 

    my $buffer = $$opts{SnpCluster_buffer};
    my $n = @$buffer;

    # The buffer is empty and the line contains only reference alleles, print directly
    if ( $n==0 && defined $line && $$line[4] eq '.' )
    {
        $$line[6] = $$opts{vcf}->add_filter($$line[6],'SnpCluster'=>0); 
        return $line;
    }

    # Store the line in buffer and check how many lines can be printed
    my $to;     # All lines up to and including this index will be printed
    my $win = $$opts{SnpCluster_win};
    if ( defined $line )
    {
        # Exclude REF (and maybe also other filters?) form SnpCluster
        my $can_be_filtered = $$line[4] eq '.' ? 0 : 1;
        push @$buffer, { line=>$line, chr=>$$line[0], pos=>$$line[1], can_be_filtered=>$can_be_filtered, in_cluster=>0 };
        $n++;

        # Does the buffer hold enough lines now?
        my $last_chr = $$buffer[-1]{chr};
        my $last_pos = $$buffer[-1]{pos};
        for (my $i=$n-1; $i>=0; $i--)
        {
            my $buf = $$buffer[$i];
            if ( $$buf{chr} ne $last_chr ) { $to=$i; last; }
            if ( $last_pos - $$buf{pos} >= $win ) { $to=$i; last; }
        }

        if ( !defined $to ) { return; }
    }
    if ( !defined $to ) { $to=$n-1; }

    # Calculate the number of variants within the window
    my $count = 0;
    my $max_count = $$opts{SnpCluster_count};
    my $start_chr = $$buffer[0]{chr};
    my $start_pos = $$buffer[0]{pos};
    my $idx;
    for ($idx=0; $idx<$n; $idx++)
    {
        my $buf = $$buffer[$idx];
        if ( $$buf{chr} ne $start_chr ) { last; }
        if ( $$buf{pos} - $win >= $start_pos ) { last; }
        if ( $$buf{can_be_filtered} ) { $count++; }
    }

    # If a SNP cluster was found, set the in_cluster flag for all relevant sites. 
    #   The buffer will be flushed and the orphans would pass unnoticed.
    if ( $count>=$max_count )
    {
        for (my $i=0; $i<$idx; $i++)
        {
            if ( $$buffer[$i]{can_be_filtered} ) { $$buffer[$i]{in_cluster}=1; }
        }
    }

    # Now output the lines, adding or removing the filter
    my @out = ();
    for (my $i=0; $i<=$to; $i++)
    {
        my $buf = shift(@$buffer);
        if ( $$buf{in_cluster} )
        {
            $$buf{line}[6] = $$opts{vcf}->add_filter($$buf{line}[6],'SnpCluster'=>1); 
        }
        else
        { 
            $$buf{line}[6] = $$opts{vcf}->add_filter($$buf{line}[6],'SnpCluster'=>0); 
        }
        push @out,$$buf{line};
    }

    # Output all non-variant lines at the beggining of the buffer
    while (@$buffer)
    {
        if ( $$buffer[0]{can_be_filtered} ) { last; }
        my $buf = shift(@$buffer);
        $$buf{line}[6] = $$opts{vcf}->add_filter($$buf{line}[6],'SnpCluster'=>0);
        push @out,$$buf{line};
    }
    return @out;
}

sub print_line
{
    my ($line) = @_;
    if ( defined $line ) { print join("\t",@$line) . "\n"; }
}



#---------------------------------

package Reader;

use strict;
use warnings;
use Carp;

sub new
{
    my ($class,@args) = @_;
    my $self = @args ? {@args} : {};
    bless $self, ref($class) || $class;
    if ( !$$self{delim} ) { $$self{delim} = qr/\t/; }
    if ( !$$self{chr} ) { $$self{chr} = 0; }        # the index of the chromosome column (indexed from 0)
    if ( !$$self{from} ) { $$self{from} = 1; }      # the index of the from column 
    if ( !$$self{to} ) { $$self{to} = 2; }          # the index of the to column 
    return $self;
}

sub throw
{
    my ($self,@msg) = @_;
    confess @msg;
}

sub open
{
    my ($self,%args) = @_;
    if ( !$$self{file} ) { return; }
    $self->close();
    open($$self{fh},"tabix $$self{file} $args{region} |") or $self->throw("tabix $$self{file}: $!");
}

sub close
{
    my ($self) = @_;
    if ( !$$self{fh} ) { return; }
    close($$self{fh});
    delete($$self{fh});
    delete($$self{buffer});
}

sub unread_line
{
    my ($self,$line) = @_;
    unshift @{$$self{buffer}}, $line;
    return;
}

sub next_line
{
    my ($self) = @_;
    if ( !$$self{fh} ) { return undef; }    # Run in dummy mode
    if ( $$self{buffer} && @{$$self{buffer}} ) { return shift(@{$$self{buffer}}); }
    my $line;
    # Skip comments
    while (1)
    {
        $line = readline($$self{fh});
        if ( !defined $line ) { return undef; }
        if ( $line=~/^#/ ) { next; }
        last;
    }
    my @items = split($$self{delim},$line);
    return \@items;
}

