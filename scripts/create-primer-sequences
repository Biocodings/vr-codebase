#!/usr/bin/env perl

=head1 NAME

create-primer-sequences

=head1 SYNOPSIS

 This tool can create primer sequences using primer3 to make the primer sequences based on the fasta supplied and exonerate to find alignments between the primer sequences and fasta to allow removal of duplicate alignments.
 
 The input needs to have chromosome and position in a tab-separated form (ref and alt sequences are optional):
    CHROMOSOME\tPOSITION\tREF\tALT
    e.g.
    X	39007429	A	G
    X	69690631	T	C
    
  The eventual output is currently in the form of a tab-delimited file (subject to change!)
  e.g.
    #ID	Left_primer	Right_primer	Melting_temperatures	Product_length
    1_X_39007429	CGCAGAGCCATCTGTGTTTA	CGACAACAAAATGCATCAGG	60.011,60.111	252
    2_X_69690631	ACAAAGGCATAACAGACGGC	TCTCACCATGACCACCTTGA	60.140,60.088	83

  The script has 3 mandatory inputs and 3 optional ones:
  
  -f, --flanking-length <int>-<int>       The length of the flanking sequence.
  -r, --ref <file>                        The reference sequence.
  -s, --sites <file>                      The file containing the sites data to produce primers for.
  -c, --cluster                           [OPTIONAL] Group sites into clusters if they are within the minimum range of the -f option. 
  -d, --tmp-dir                           [OPTIONAL] Where to put temporary files.
  -e, --edits <vcf>                       [OPTIONAL] To locate snps and indels within the flanking sequences.
  -n, --notidy                            [OPTIONAL - for debugging] Do not delete the temporary files created.
  -t, --transcripts                       [OPTIONAL] Design primers also for all transcripts (queries Ensembl).
  -v, --verbose
  
  also:
  -h, -?, --help                          The help message.

=head1 AUTHORS

John Maslen, jm23@sanger.ac.uk, Team 145

methods by Petr Danacek, pd3@sanger.ac.uk, Team145

=cut

use strict;
use warnings;

use Data::Dumper;
use Getopt::Long;
use File::Basename;
use Carp;
use FaSlice;
BEGIN{
    my $ROOT = '/software/vertres/lib/all';
    my $VERSION = '64';
    unshift(@INC, "$ROOT/ensembl/$VERSION/ensembl/modules");
    unshift(@INC, "$ROOT/ensembl/$VERSION/ensembl-variation/modules");
    unshift(@INC, "$ROOT/ensembl/$VERSION/ensembl-compara/modules");
    unshift(@INC, "$ROOT/ensembl/$VERSION/ensembl-functgenomics/modules");
}
use Bio::EnsEMBL::Registry;
use Bio::EnsEMBL::Variation::VariationFeature;


my ($help);
my $opts = {};

GetOptions(
    's|sites=s'                  =>  \$$opts{sites},
    'c|cluster'                  =>  \$$opts{cluster},
    'f|flanking-length=s'        =>  \$$opts{flank},
    'r|ref=s'		             =>  \$$opts{refseq},
    'e|edits=s'		             =>  \$$opts{edits},
    'n|notidy'					 =>  \$$opts{notidy},
    'd|tmp-dir=s'                =>  \$$opts{outdir},
    't|transcripts'			     =>  \$$opts{transcripts},
    'v|verbose' 		         =>  \$$opts{verbose},
    'h|?|help'	                 =>  \$help,
    );



&error() unless $$opts{sites} && $$opts{flank} && $$opts{refseq} && !$help;

init_paths($opts);
run_primer3($opts);
run_exonerate($opts);
make_unique_primers($opts);
write_primers_output($opts);
clean($opts);

exit;

#=======================================

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die <<USAGE;
 Usage: 
 	$0 -s <file of sites> -f <int>-<int> -r <reference fasta> [OPTIONAL -e <vcf> ] > output_file
 	$0 --sites <file of sites> --flanking-length <int>-<int> --ref <reference fasta> [OPTIONAL --edits <vcf> ]  > output_file
    
  Parameters:  
  -f, --flanking-length <int>-<int>       The length of the flanking sequence.
  -r, --ref <file>                        The reference sequence.
  -s, --sites <file>                      The file containing the sites data to produce primers for.
  -c, --cluster                           [OPTIONAL] Group sites into clusters if they are within the minimum range of the -f option. 
  -d, --tmp-dir                           [OPTIONAL] Where to put temporary files.
  -e, --edits <vcf>                       [OPTIONAL] To locate snps and indels within the flanking sequences.
  -n, --notidy                            [OPTIONAL - for debugging] Do not delete the temporary files created.
  -t, --transcripts                       [OPTIONAL] Design primers also for all transcripts (queries Ensembl).
  -v, --verbose
  -h, -?, --help                          The help message.
  
  See perldoc for more information on the usage of this script.
   
USAGE
}

sub run_primer3
{
    my ($opts) = @_;

    if ( !($$opts{flank}=~/^(\d+)-(\d+)$/) ) { error("Could not parse [$$opts{flank}]"); }
    $$opts{span_min} = $1;
    $$opts{span_max} = $2;

    $$opts{fa} = FaSlice->new(file=>$$opts{refseq}); 

    my @sites = ();

    open(my $fh_prm, ">", $$opts{prmr3_input}) or error ("Unable to create $$opts{prmr3_input}");
    open(my $fh_sites, "<", $$opts{sites}) or error ("Unable to open $$opts{sites}");
    while (my $line=<$fh_sites>)
    {
        if ( $line=~/^#/ ) { next; }
        my @items = split(/\s+/,$line);
        chomp($items[-1]);
		if ( @items<2 or !($items[1]=~/^\d+$/) ) { error("Could not parse: $line"); }
        push @sites, { chr=>$items[0], pos=>$items[1], ref=>$items[2] ? $items[2] : '', alt=>$items[3] ? $items[3] : '' };
        flush_sites($opts,$fh_prm,\@sites);
    }
    flush_sites($opts,$fh_prm,\@sites,1);
    close($fh_sites);
    close($fh_prm);
    cmd($opts,"$$opts{prmr3_exec} -output $$opts{prmr3_output} $$opts{prmr3_input}");
}

sub flush_sites
{
    my ($opts,$fh,$sites,$force) = @_;
    if ( !@$sites ) { return }

    my @sites;
    if ( !$force && $$opts{cluster} )
    {
        if ( @$sites==1 ) { return; }
        if ( $$sites[-1]{chr} eq $$sites[-2]{chr} && $$sites[-1]{pos} < $$sites[-2]{pos} ) 
        { 
            error("The sites must be sorted with the -c option: $$sites[-1]{chr}:$$sites[-1]{pos} seen after $$sites[-2]{pos}\n"); 
        }

        # Check if the last site is still within a cluster
        if ( $$sites[0]{chr} eq $$sites[-1]{chr} && $$sites[-1]{pos}-$$sites[0]{pos}<$$opts{span_min} ) { return; }

        @sites = splice(@$sites,0,@$sites-1);
    }
    else
    {
        @sites = splice(@$sites,0);
    }

    # Find the center
    my $pos = ($sites[0]{pos}+$sites[-1]{pos})/2;
    my $chr = $sites[0]{chr};

    my $range_min = int($$opts{span_min}/2);
    my $range_max = int($$opts{span_max}/2);

    my $from = $pos - $range_max;
    my $to   = $pos + $range_max;

    my @mask_positions;
    if ( $$opts{edits} )
    {
        my @query_out  = `tabix $$opts{edits} $chr:$from-$to`;
        for my $vcf_line (@query_out) 
        {
            my @vcf_items = split("\t", $vcf_line);
            push @mask_positions, { pos=>$vcf_items[1], ref=>$vcf_items[3] };
        }	
    }

    my $seq = $$opts{fa}->get_slice($chr,$from,$to);
    my $ref = substr($seq,$range_max,1); # For sanity check in the transcripts
    for my $vcfpos (@mask_positions) 
    {
        # Alternative way would be to replace REF by ALT. However, this might not be possible 
        #   when the primers were intended for multiple samples
        substr($seq,$$vcfpos{pos}-$from,1,'N');
    }
    push my @seqs, { seq=>$seq, id=>"gDNA:$from-$to" };

    if ( $$opts{transcripts} )
    {
        push @seqs, query_transcripts($opts,chr=>$chr,pos=>$pos,ref=>$ref,range_min=>$range_min,range_max=>$range_max,mask=>\@mask_positions);
    }

    for my $seq (@seqs)
    {
        my $pcr_from = $range_max-$range_min;
        my $pcr_len  = $range_min*2+1;
        print $fh "SEQUENCE_ID=${chr}_${pos}_$$seq{id}\n";
        print $fh "SEQUENCE_TEMPLATE=$$seq{seq}\n";
        print $fh "SEQUENCE_TARGET=$pcr_from,$pcr_len\n";
        print $fh "PRIMER_MAX_NS_ACCEPTED=0\n";
        print $fh "PRIMER_TASK=pick_pcr_primers\n";
        print $fh "=\n";
    }
}

sub query_transcripts
{
    my ($opts,%args) = @_;
    if ( !exists($$opts{registry}) ) 
    {
        $$opts{species} = 'Mus_musculus';
        warn("ToDo: Using hardwired species for Ensembl: $$opts{species}\n");

        $$opts{registry} = 'Bio::EnsEMBL::Registry';
        $$opts{registry}->load_registry_from_db(-host => 'ensembldb.ensembl.org', -user => 'anonymous', -port => 5306);
        $$opts{gene} = $$opts{registry}->get_adaptor($$opts{species}, "core", "Gene");
        $$opts{transcript} = $$opts{registry}->get_adaptor($$opts{species}, "core", "Transcript");
        $$opts{variation} = $$opts{registry}->get_adaptor($$opts{species}, "variation", "variationfeature");
        $$opts{slice} = $$opts{registry}->get_adaptor($$opts{species}, "core", "Slice");
    }
    my $range = $args{range_max};
    my $chr   = $args{chr};
    my $pos   = $args{pos};
    my $ref   = $args{ref};
    my $alt   = $args{alt};
    my @seqs  = ();
    
    my $slice = $$opts{slice}->fetch_by_region('chromosome',$chr,$pos,$pos);
    my $transcripts = $$opts{transcript}->fetch_all_by_Slice($slice);
    while ( my $tr = shift @{$transcripts} ) 
    {
        my $tr = $$opts{transcript}->fetch_by_stable_id($tr->stable_id);
        my $strand    = $tr->strand();
        my $stable_id = $tr->stable_id();
        my $cpos      = ($tr->genomic2cdna($pos,$pos,1))[0]->start - 1;   # Ensembl uses 1-based coordinates
        my $seq       = $tr->seq->seq;

        # Apply known variant mask
        for my $mpos (@{$args{mask}})
        {
            my $cmpos = ($tr->genomic2cdna($mpos,$mpos,1))[0]->start - 1;
            substr($seq,$cmpos,1,'N');
        }

        # Chop the sequence or extend with N's 
        if ( $cpos > $range ) 
        { 
            $seq = substr($seq,$cpos-$range); 
        }
        elsif ( $cpos < $range ) 
        { 
            $seq = ('N' x ($range-$cpos)) . $seq; 
        }
        my $seq_len = length($seq);
        if ( $seq_len > 2*$range+1 ) 
        { 
            $seq = substr($seq,0,2*$range+1); 
        }
        elsif ( $seq_len < 2*$range+1 )
        {
            $seq .= 'N' x (2*$range+1-$seq_len);
        }
        my $base = substr($seq,$range,1);
        if ( $base ne $args{ref} ) { error("Sanity check failed: expected $args{ref}, got $base\n"); }

        my $has_seq = 0;
        for my $stored (@seqs)
        {
            if ( $$stored{seq} eq $seq ) { $has_seq = $stored; last; }
        }
        my $id = "$stable_id:".($cpos-$range)."-".($cpos+$range);
        if ( $has_seq ) 
        { 
            if ( $$opts{verbose} ) { print STDERR "The transcript sequence $id identical to $$has_seq{id}, skipping...\n"; }
            next; 
        }
        push @seqs, { seq=>$seq, id=>$id };
    }
    return @seqs;
}

sub run_exonerate
{
    my ($opts) = @_;
    my $id;
    
    open (FA_FILE, ">", $$opts{prmrs_fa}) or error ("Unable to create $$opts{prmrs_fa}");
    open (PRMR3_FILE, "<", $$opts{prmr3_output}) or error ("Unable to open $$opts{prmr3_output}");
    while (<PRMR3_FILE>) {
		my $line = $_;
		chomp $line;
        # SEQUENCE_ID=MATCH_DEL_RAW_1_1088554_220_221bp
        if ( $line=~/^SEQUENCE_ID=/ )
        {
            $id = $';
            next;
        }
        if ( $line=~/^PRIMER_LEFT_(\d+)_SEQUENCE=/ )
        {
            print FA_FILE ">${id}_L$1\n$'\n";
            next;
        }
        if ( $line=~/^PRIMER_RIGHT_(\d+)_SEQUENCE=/ )
        {
            print FA_FILE ">${id}_R$1\n$'\n";
            next;
        }
    }
    close (PRMR3_FILE);
    close (FA_FILE);
    
    cmd($opts,"$$opts{exonerate_exec} $$opts{prmrs_fa} $$opts{refseq} > $$opts{exonerate_output}");
}

sub make_unique_primers
{
    my ($opts) = @_;
    my $hit;
    open (EXN_FILE, "<", $$opts{exonerate_output}) or error ("Unable to open $$opts{exonerate_output}");
    while (<EXN_FILE>)
    {
        # vulgar: MATCH_DEL_RAW_19_46278660_1026_1027bp_R4 0 20 + 1 6081126 6081106 - 100 M 20 20
        my $line = $_;
        if ( $line=~/^vulgar: (\S+)/ )
        {
            $$hit{$1}++;
        }
    }
    while (my ($exn_id,$val)=each %$hit)
    {
        # X_39007429_L1	1 captures 1. X_39007429, 2. L, 3. 1, 4. 1
        if ( !($exn_id=~/^(\S+)_([LR])(\d+)$/) ) { error("Could not parse: $exn_id"); }
        my $id    = $1;
        my $lr    = $2;
        my $pair  = $3;
        my $count = $4;
        $$opts{dat}{$id}{$pair} += $val;
    }
    close(EXN_FILE);
    
    open (PRMR3_FILE, "<", $$opts{prmr3_output}) or error ("Unable to open $$opts{prmr3_output}");
    open (UNIQ_FILE, ">", $$opts{unique_primers}) or error ("Unable to create $$opts{unique_primers}");
    my $id;
    my $eat = 0;
    my $eaten_rec = 0;
    while (<PRMR3_FILE>)
    {
        my $line = $_;
        chomp($line);
        if ( $line=~/^SEQUENCE_ID=/ ) {
            $eat = 0;
            $id = $';
            if ( !has_uniq($$opts{dat}{$id},$id) ) {
                $eat = 1;
                $eaten_rec++;
                next;
            }
        }
        if ( $eat ) { next; }

        if ( $line=~/^PRIMER_PAIR_(\d+)/ or $line=~/^PRIMER_LEFT_(\d+)/ or $line=~/^PRIMER_RIGHT_(\d+)/ ) {
            my $pair = $1;
            if ( $$opts{dat}{$id}{$pair}>2 ) { 
                print UNIQ_FILE "# non-unique ($$opts{dat}{$id}{$pair}x) \t"; 
            }
        }
        print UNIQ_FILE "$line\n";
    }
    #print STDERR "Excluded records: $eaten_rec\n";
    close(PRMR3_FILE);
    close(UNIQ_FILE);
}

sub write_primers_output
{ 
	my ($opts) = @_;

    open (UNIQ_FILE, "<", $$opts{unique_primers}) or error ("Unable to open $$opts{unique_primers}");
	print "#ID\tLeft_primer\tRight_primer\tMelting_temperagures\tProduct_length\tTarget_ID\tTarget_Sequence\n";
	
    my ($id,$sid,$seq,@lprimer,@rprimer,@lpos,@rpos,@ltm,@rtm,$chr,$pos);
    while (<UNIQ_FILE>)
    {
        my $line = $_;
        chomp($line);

        # SEQUENCE_ID=1_133922278
        if ( $line=~/^SEQUENCE_ID=/ ) 
        { 
            if ( $id ) { output_primer($opts,$id,$sid,$seq,$lprimer[0],$rprimer[0],$lpos[0],$rpos[0],$ltm[0],$rtm[0],$chr,$pos); }
            $id = $';
            if ( !($id=~/(\S+)_(\d+)(_.+)?$/) ) { error("weird id: $id\n"); }
            $chr = $1;
            $pos = $2;
            $sid++;

            @lprimer = ();
            @rprimer = ();
            @lpos = ();
            @rpos = ();
            @ltm  = ();
            @rtm  = ();

            next;
        }
        if ( !defined $id ) { next; }

        if ( $line=~/^SEQUENCE_TEMPLATE=/ )
        {
            $seq = $';
            next;
        }
        if ( $line=~/^PRIMER_LEFT_\d+_SEQUENCE=/ )
        {
            push @lprimer, $';
            next;
        }
        if ( $line=~/^PRIMER_RIGHT_\d+_SEQUENCE=/ )
        {
            push @rprimer, $';
            next;
        }

        if ( $line=~/^PRIMER_RIGHT_\d+=/ )
        {
            push @rpos, $';
            next;
        }

        if ( $line=~/^PRIMER_LEFT_\d+=/ )
        {
            push @lpos, $';
            next;
        }

        if ( $line=~/^PRIMER_RIGHT_\d+_TM=/ )
        {
            push @rtm, $';
            next;
        }

        if ( $line=~/^PRIMER_LEFT_\d+_TM=/ )
        {
            push @ltm, $';
            next;
        }
    }
    if ( $id ) { output_primer($opts,$id,$sid,$seq,$lprimer[0],$rprimer[0],$lpos[0],$rpos[0],$ltm[0],$rtm[0],$chr,$pos); }

}

sub output_primer
{
    my ($opts,$id,$sid,$seq,$lprimer,$rprimer,$lpos,$rpos,$ltm,$rtm,$chr,$pos) = @_;
    
	my $pair_id = sprintf "%s_%s_%s", $sid,$chr,$pos;

    # Sanity check the positions
    my ($ppos,$len) = split(/,/,$lpos);
    if ( length($lprimer) != $len ) { error("Different length: $lprimer $len\n"); }
    my $lidx = index($seq,$lprimer);
    if ( $lidx==-1 ) { error("Not found: $id .. $lprimer in $seq"); }
    
    ($ppos,$len) = split(/,/,$rpos);
    if ( length($rprimer) != $len ) { error("Different length: $rprimer $len\n"); }
    my $rrprimer = rev_strand(1,$rprimer);
    my $ridx = index($seq,$rrprimer);
    if ( $ridx ==-1 ) { error("Not found: $id .. $rprimer ($rrprimer)"); }

    my $span = $ridx - $lidx - length($lprimer);
    my $span_seq = substr($seq,$lidx,$span+length($rprimer)+length($lprimer));
    if ( $span<$$opts{span_min} or $span>$$opts{span_max} ) { error("The primer $pair_id not within requested range <$$opts{span_min},$$opts{span_max}>: $span\n"); }

    $id =~ s/^\S+_\d+_//;
    print "$pair_id\t$lprimer\t$rprimer\t$ltm,$rtm\t$span\t$id\t$span_seq\n";
}

sub rev_strand
{
    my ($reverse,$seq) = @_;

    my %map = (A=>'T',C=>'G',G=>'C',T=>'A',U=>'A',a=>'t',c=>'g',g=>'c',t=>'a',u=>'a');
    my $rev;
    my $len = length($seq);

    if ( $reverse )
    {
        for (my $i=$len-1; $i>=0; $i--)
        {
            my $base = substr($seq,$i,1);
            $rev .= exists($map{$base}) ? $map{$base} : $base;
        }
    }
    else
    {
        for (my $i=0; $i<$len; $i++)
        {
            my $base = substr($seq,$i,1);
            $rev .= exists($map{$base}) ? $map{$base} : $base;
        }
    }
    return $rev;
}

sub has_uniq
{
    my ($rec,$id) = @_;
    for my $i (0..4)
    {
        if ( !exists($$rec{$i}) ) { warn("No such key: $i $id\n"); return 0; }
        if ( $$rec{$i}==2 ) { return 1; }
    }
    return 0;
}

sub get_random_key
{
	my @letters = ('a'..'z');
	my $range = 10;
	my $rand_key;
	for (my $i = 1; $i<4; $i++) {
		$rand_key .= $letters[int rand @letters];
		$rand_key .= int(rand($range));
	}
	return $rand_key;
}

sub clean
{
    my ($opts) = @_;
    if ( $$opts{notidy} ) { return; }
    for my $file (@{$$opts{files_to_remove}})
    {
        unlink($file);
    }
}

sub init_paths
{
    my ($opts) = @_;

    my ($tmp_file);
    if ( $$opts{outdir} )
    {
        $tmp_file = "$$opts{outdir}/";
        `mkdir -p $$opts{outdir}`;
    }
    else
    {
        ($$opts{input_name}, $$opts{directory}) = fileparse($$opts{sites}, qr/\.[^.]*/);
        my $random_key = get_random_key();
        $tmp_file = $$opts{directory}."tmp_$$opts{input_name}.".$random_key;
    }

    ##Primer 3 options
    $$opts{prmr3_input} = "${tmp_file}1-primer3.in";
    $$opts{prmr3_output} = "${tmp_file}1-primer3.out";
    $$opts{prmr3_exec} = "/software/vertres/bin-external/primer3_core";

    ##Exonerate options
    $$opts{prmrs_fa} = "${tmp_file}2-exonerate.fa";
    $$opts{exonerate_output} = "${tmp_file}2-exonerate.out";
    $$opts{exonerate_exec} = "/software/vertres/bin-external/exonerate";

    ##Unique primer stage options
    $$opts{unique_primers} = "${tmp_file}3-unique-primers.txt";

    $$opts{files_to_remove} = [ $$opts{unique_primers}, $$opts{prmr3_input}, $$opts{prmr3_output}, $$opts{prmrs_fa}, $$opts{exonerate_output} ];

    $SIG{TERM} = sub { clean($opts); exit; };
    $SIG{INT}  = sub { clean($opts); exit; };
}

sub cmd
{
    my ($opts,$cmd) = @_;
    if ( $$opts{verbose} ) { print STDERR "$cmd\n"; }
    `$cmd`;
    if ( $? ) { error("The command failed: $cmd"); }
}

