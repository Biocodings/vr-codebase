Using PennCNV and QuantiSNP
===========================

The overall goal of QC1 is to detect which of the derived/iPS samples is most like a well reprogrammed iPS sample, 
so that such a sample can be selected for the further sequencing, etc. studies. QC1 is a quicker/cheaper check 
for iPS reprogramming success, i.e. to assist selection between the iPS samples before the more expensive exome sequencing, 
ChIP-seq, RNA-seq studies. PluriTest is used to see if the expression profile is similar to an average expression 
profile for iPS samples. PennCNV and QuantiSNP are used to identify denovo CNVs as an indication of genetic disruptions 
caused by the reprogramming process that creates the iPS samples. Disruptions are viewed as an indication of a 
less successful iPS sample which is less desirable to be selected as a sample to be sequenced etc. in 
the "QC2" stage of HipSci (exome sequencing, ChIP-seq, RNA-seq).  

[Hannah Blackburn <hb3@sanger.ac.uk> is the contact in genotyping.]

PennCNV predictions are performed using the genotype fcr file after it has been split into individual fcr files i.e. one file 
per sample. 

After the predictions are made for all samples including the controls, for each cohort (control + iPS samples) the CNVs for 
the control are compared to the CNVs for each iPS sample. If there is a 50% reciprocal overlap between a CNV in the control and a 
CNV in an iPS sample, the CNV is removed from the final result for the iPS sample. This is because of the expectation 
that this is not a de novo CNV as it was already present in the donor's unreprogrammed/control sample.

QuantiSNP is a very similar program to PennCNV. The objective of using both PennCNV and QuantiSNP is to have CNV predictions 
that can be compared for consistency. We compare the two sets of CNVs to increase confidence in them (i.e. when they agree). 
Although the CNVs do no not often completely agree (20-30% of CNVs overlap between the two methods on average, and this 
is typical of all CNV callers that use genotype data from a small number of samples), they do generally show the same patterns.

QuantiSNP uses the same split fcr files (one sample per file) produced for PennCNV, but they require a further reformatting 
step before their use. After CNVs are predicted by QuantiSNP, in the same way as just described for PennCNV, the 
CNVs are compared between the control and iPS samples for each cohort, and those with a 50% reciprocal overlap are removed 
from the results for the iPS samples.

Obtain the genotyping fcr file from iRODS
=========================================

Required data files:
- genotyping fcr file e.g. coreex_hips_20140213.fcr.txt

This file should be available using iRODS - see iRODS_access.txt for more info on accessing the data. E.g.:

>iget /archive/GAPI/gen/analysis/19/7d/27/coreex_hips/20140213/coreex_hips_20140213.fcr.txt.gz

Finding the friendly IDs for the samples
========================================

I get the friendly IDs for each of the samples from a spreadsheet that Anja maintains, so I always ask her for an 
up-to-date copy of it when new genotyping/expression data is released.g. "All samples list CGaP_140122 no filter.xlsx".

Split and reformat the genotyping fcr file
==========================================

Useful scripts:

- split_fcr_into_parts.pl
- getIDsInFCR.pl

Remove the first ~9 lines of the fcr file (e.g. coreex_hips_20140213.fcr.txt) i.e.
remove anything up to the line:

SNP Name        Sample ID Allele1 - Top Allele2 - Top   GC Score        Theta   R       X       Y       X Raw   Y Raw   B Allele Freq Log R Ratio

I.e. remove this:

[Header]
GSGT Version    1.9.4
Processing Date 2/13/2014 4:06 PM
Content         HumanCoreExome-12v1-0_A.bpm
Num SNPs        538448
Total SNPs      538448
Num Samples     12
Total Samples   229
[Data]

The line that is at the start of the file now also needs some small changes to work with PennCNV - the line which is now at the start of the file:

SNP Name        Sample ID Allele1 - Top Allele2 - Top   GC Score        Theta   R       X       Y       X Raw   Y Raw   B Allele Freq Log R Ratio

should be changed (SNP Name -> Name, plus insert set/batch name before B Allele Freq and Log R Ratio) to something like :

Name        Sample ID Allele1 - Top Allele2 - Top   GC Score        Theta   R       X       Y       X Raw   Y Raw   Batch14.B Allele Freq Batch14.Log R Ratio

Convert the fcr file to UNIX format:

>dos2unix coreex_hips_20140213.fcr.txt

Optional: check the sample IDs inside the fcr file (use the result to map the sample IDs to friendly IDs taken from Anja's 
spreadsheet as mentioned above):

>perl getIDsInFCR.pl coreex_hips_20140213.fcr.txt-EDIT > 20140213_IDs.txt

Now split the fcr file per sample:

>mkdir batch14_split
>perl split_fcr_into_parts.pl coreex_hips_20140213.fcr.txt batch14_split/

Run PennCNV's detect_cnv.pl to predict raw CNVs
===============================================

Please note, for PennCNV to run on the VR farm (64 bit) it was compiled using a specific version of Perl:

/software/team145/perl-5.18.2/bin/perl

This was created by systems for this purpose. The standard version of perl on the system didn't work 
(if I remember correctly, I think it didn't work with -ftic which is related to multithreading).
I modified the PennCNV makefile before compilation of PennCNV (see /software/vertres/installs/HipSci/PennCNV/kext/Makefile) 
so that it used references to this version.

There are two copies of PennCNV on the system that should both work on 64 bit machines.

/software/vertres/bin-external/PennCNV
/software/vertres/installs/HipSci/PennCNV

detect_cnv.pl is the PennCNV program for predicting raw CNVs. When using PennCNV's detect_cnv.pl use the special 
version of perl i.e.

/software/team145/perl-5.18.2/bin/perl /software/vertres/bin-external/PennCNV/detect_cnv.pl [+ parameters]
/software/team145/perl-5.18.2/bin/perl /software/vertres/installs/HipSci/PennCNV/detect_cnv.pl [+ parameters]

The way that I use it is:

>/software/team145/perl-5.18.2/bin/perl detect_cnv.pl -test -hmm $PennCNVDir/lib/custom.hmm -pfb $PennCNVDir/lib/HumanExome12v1.1.hg19.pfb --confidence --region 1-22 --minsnp 1 -log your_logfile.txt -out your_output.rawcnv $inputSplitFCRFile

where $inputSplitFCRFile is one of the split files (one sample per file) created as described above (in the above example they were put into batch14_split/).

To run a batch of CNV predictions on the split files you've already generated on the VR farm, you can use 
a script that I have:

>perl run_PennCNV_on_split_files.pl $split_files_dir $results_dir 

where $splitFilesDir = dir generated from splitting e.g. batch14_split/ in the above example.
      $results_dir   = any directory you'd like the results to go into

For example:

>perl run_PennCNV_on_split_files.pl batch14_split/ rawcnv/

custom.hmm was provided by CNV-Webstore in Antwerp Belgium, along with HumanExome12v1.1.hg19.pfb. I did a lot of testing 
and these seem OK. The author said that custom.hmm is more sensitive than the hmm provided with PennCNV. PennCNV is no longer 
maintained so it was quite a lot of trouble getting HumanExome12v1.1.hg19.pfb as this isn't available with PennCNV, 
and the genotyping chip that we are using for HipSci (Illumina HumanCoreExome BeadChip) was not available when PennCNV was last 
maintained. It was therefore necessary to find this file to get PennCNV to work, and hence why I got it from CNV-Webstore. 
This is not optimal as we are using HumanCoreExome12v1.1 chip, which has more SNPs, but this is the most similar that I could 
find. Hence, some of the SNPs from the HipSci chip are not used in PennCNV but this was the nearest set of SNPs that I could 
obtain anywhere. I spent a lot of time looking.

Filter the PennCNV raw CNVs using PennCNV's filter_cnv.pl
=========================================================

Now filter the raw CNV results. I use the parameters >=10 SNPs, >=130Kb, --confidence 10
I performed exhaustive benchmarking to find the optimal parameters and in combination with advice by K. Wang (the 
main author of PennCNV) I found these parameters to be acceptable/as good as others if not better. PennCNV is not designed to do 
what we are using it for. K. Wang states that in normal use of PennCNV the parameters should be varied until a reasonable number 
of CNVs are found i.e. ~30. These should be then further investigated for correctness. That is not what is being done here, we 
are blindly predicting CNVs using a fixed set of parameters.

Use run_filter.pl by itself to filter a previously produced raw cnv e.g.:

>perl run_filter.pl rawcnv/ filteredcnv/

You now have some filtered CNVs. 

Now generate some QuantiSNP CNVs.

Reformat split fcr files to QuantiSNP format
============================================

To converted the split fcr files individually you can use:

>perl convert_split_fcr_to_quanti_format.pl $splitFile

For example:

>perl convert_split_fcr_to_quanti_format.pl 324153_A01_QC1Hip-963

Because the conversions take a while to run, I use a script bsub_convert_to_QSNP.pl for launch a set of jobs on the queue system on the farm e.g.:

>perl bsub_convert_to_QSNP.pl batch14_split/ QSNP_converted_dirs/

[This takes a while to complete.]

Predict QuantiSNP CNVs
======================

Now run QuantiSNP on all of the converted files using the vr farm using e.g.:

perl bsub_quantisnp.pl QSNP_converted_dirs/converted/ run_QSNP_dirs/

Or use on individual files like this:

sh /software/vertres/installs/HipSci/QuantiSNP/run_quantisnp2.sh /software/vertres/installs/HipSci/QuantiSNP/v79 --outdir $resultsDir --input-files $convertedFile --sampleid $sampleID --levels /software/vertres/installs/HipSci/QuantiSNP/config/levels.dat --config /software/vertres/installs/HipSci/QuantiSNP/config/params.dat --chr 1:22

E.g.:

sh /software/vertres/installs/HipSci/QuantiSNP/run_quantisnp2.sh /software/vertres/installs/HipSci/QuantiSNP/v79 --outdir results/ --input-files QSNP_converted_dirs/converted/324153_A01_QC1Hip-963.converted --sampleid 324153_A01_QC1Hip-963 --levels /software/vertres/installs/HipSci/QuantiSNP/config/levels.dat --config /software/vertres/installs/HipSci/QuantiSNP/config/params.dat --chr 1:22

You now have some QuantiSNP predicted CNVs.

Compare Control CNVs to iPS Sample CNVs to Identify Denovo CNVs for the iPS Samples
===================================================================================

For each set of results, as mentioned above, the CNVs predicted in the iPS samples are compared 
to those in the control/fibroblast for their cohort, and overlapping CNVs are removed from the final results for 
the iPS samples where a >=50% reciprocal overlap occurs. This is done using bedtools.

Create BED files for PennCNV filtered CNVs
==========================================

Generate a bed file for each filtered PennCNV file:

>perl reformat_PCNV_to_BED.pl your_dir_of_PennCNV_filtered_CNVs/

Create BED files for QuantiSNP CNVs
===================================

Generate a bed file for each QuantiSNP CNV file:

>perl reformat_QSNP_to_BED.pl your_dir_of_QSNP_CNVs/

Remove CNVs that are present in the control
===========================================

You will need an ID map from Sanger Sample IDs to friendly IDs. If you performed PluriTest manually 
before this you may already have this information. Otherwise you can use the Sample ID to look up 
the friendly ID in a spreadsheet that you can get from Anja that contains all current
samples e.g. "All samples list CGap_140122 no filter.xls".
I email her for the latest version when new genotyping/expression data becomes available on iRODS.

You should create a map that looks something like this:

322220_H01_QC1Hip-844  dard   
322220_E01_QC1Hip-841  dard_1 
322220_F01_QC1Hip-842  dard_2 
322220_G01_QC1Hip-843  dard_3 
                       
322220_D02_QC1Hip-848  veqz   
322220_A02_QC1Hip-845  veqz_4 
322220_B02_QC1Hip-846  veqz_5 
322220_C02_QC1Hip-847  veqz_6 
                       
322220_C01_QC1Hip-673  vorx   
322220_A01_QC1Hip-515  vorx_1 
322220_D01_QC1Hip-835  vorx_2 
322220_B01_QC1Hip-516  vorx_3 

Using this, you can see which CNV file is which sample. 

Use the ID map to compare each iPS sample's bed file to the control to find the overlap. I have a script to do this:

For the previous ID map, comparing the PennCNV filtered CNVs would consist of:

>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl filteredcnv/322220_E01_QC1Hip-841-Exome1.1-custom-09.bed filteredcnv/322220_H01_QC1Hip-844-Exome1.1-custom-12.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl filteredcnv/322220_F01_QC1Hip-842-Exome1.1-custom-10.bed filteredcnv/322220_H01_QC1Hip-844-Exome1.1-custom-12.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl filteredcnv/322220_G01_QC1Hip-843-Exome1.1-custom-11.bed filteredcnv/322220_H01_QC1Hip-844-Exome1.1-custom-12.bed

>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl filteredcnv/322220_A02_QC1Hip-845-Exome1.1-custom-02.bed filteredcnv/322220_D02_QC1Hip-848-Exome1.1-custom-08.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl filteredcnv/322220_B02_QC1Hip-846-Exome1.1-custom-04.bed filteredcnv/322220_D02_QC1Hip-848-Exome1.1-custom-08.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl filteredcnv/322220_C02_QC1Hip-847-Exome1.1-custom-06.bed filteredcnv/322220_D02_QC1Hip-848-Exome1.1-custom-08.bed

>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl filteredcnv/322220_A01_QC1Hip-515-Exome1.1-custom-01.bed filteredcnv/322220_C01_QC1Hip-673-Exome1.1-custom-05.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl filteredcnv/322220_D01_QC1Hip-835-Exome1.1-custom-07.bed filteredcnv/322220_C01_QC1Hip-673-Exome1.1-custom-05.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl filteredcnv/322220_B01_QC1Hip-516-Exome1.1-custom-03.bed filteredcnv/322220_C01_QC1Hip-673-Exome1.1-custom-05.bed

And for QuantiSNP it would consist of:

>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl run_QSNP_dirs/results/322220_E01_QC1Hip-841.bed run_QSNP_dirs/results/322220_H01_QC1Hip-844.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl run_QSNP_dirs/results/322220_F01_QC1Hip-842.bed run_QSNP_dirs/results/322220_H01_QC1Hip-844.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl run_QSNP_dirs/results/322220_G01_QC1Hip-843.bed run_QSNP_dirs/results/322220_H01_QC1Hip-844.bed

>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl run_QSNP_dirs/results/322220_A02_QC1Hip-845.bed run_QSNP_dirs/results/322220_D02_QC1Hip-848.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl run_QSNP_dirs/results/322220_B02_QC1Hip-846.bed run_QSNP_dirs/results/322220_D02_QC1Hip-848.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl run_QSNP_dirs/results/322220_C02_QC1Hip-847.bed run_QSNP_dirs/results/322220_D02_QC1Hip-848.bed

>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl run_QSNP_dirs/results/322220_A01_QC1Hip-515.bed run_QSNP_dirs/results/322220_C01_QC1Hip-673.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl run_QSNP_dirs/results/322220_D01_QC1Hip-835.bed run_QSNP_dirs/results/322220_C01_QC1Hip-673.bed
>perl reciprocal_intersect_iPS_CNVs_with_control_CNVs.pl run_QSNP_dirs/results/322220_B01_QC1Hip-516.bed run_QSNP_dirs/results/322220_C01_QC1Hip-673.bed

Or you can do it directly using bedtools e.g. 

>bedtools intersect -u -f 0.5 -r -a 322220_E01_QC1Hip-841-Exome1.1-custom-09.bed -b  322220_H01_QC1Hip-844-Exome1.1-custom-12.bed | wc -l

Optional: you can see how many CNVs were found for the controls also:

>more run_QSNP_dirs/322220_H01_QC1Hip-844-Exome1.1-custom-12.bed | wc -l
>more run_QSNP_dirs/322220_D02_QC1Hip-848-Exome1.1-custom-08.bed | wc -l
>more run_QSNP_dirs/322220_C01_QC1Hip-673-Exome1.1-custom-05.bed | wc -l

This should allow you obtain results that you can summarise like this:

                               PCNV   PCNV minus    QSNP QSNP minus 
                                      control            control
322220_H01_QC1Hip-844  dard    57                   51
322220_E01_QC1Hip-841  dard_1  129    90            122  97 
322220_F01_QC1Hip-842  dard_2  21     13            44   12 
322220_G01_QC1Hip-843  dard_3  95     51            103  79 
                                                     
322220_D02_QC1Hip-848  veqz    51                   37 
322220_A02_QC1Hip-845  veqz_4  9      3             36   11 
322220_B02_QC1Hip-846  veqz_5  49     26            156  131 
322220_C02_QC1Hip-847  veqz_6  61     37            281  253 
                                                     
322220_C01_QC1Hip-673  vorx    89                   80 
322220_A01_QC1Hip-515  vorx_1  88     40            74   45 
322220_D01_QC1Hip-835  vorx_2  103    47            75   31
322220_B01_QC1Hip-516  vorx_3  108    53            64   33 

And so you would give the final results as the 2nd, 4th and 6th columns, i.e.:

        PCNV minus    QSNP minus 
        control       control

dard_1  90            97 
dard_2  13            12 
dard_3  51            79 
                      
veqz_4  3             11 
veqz_5  26            131 
veqz_6  37            253 
                      
vorx_1  40            45 
vorx_2  47            31
vorx_3  53            33 
